================================================================================
comments with quoted
================================================================================
open Core;;
open Ppx_string;;


(* hi this is a comment test
oaiersntoiaersnt
 {|now  a quoted string (*) |}
let a = 10;;

  *)

{| ${hi} |};;
{| ${hi}|};;
{| {hi}|};;

{|${hi }|};;

--------------------------------------------------------------------------------

(compilation_unit
  (open_module
    (module_path
      (module_name)))
  (open_module
    (module_path
      (module_name)))
  (comment
    (quoted_string_content))
  (expression_item
    (quoted_string
      (quoted_string_content
        (string_interpolation
          (string_interpolation_content
            (value_path
              (value_name)))))))
  (expression_item
    (quoted_string
      (quoted_string_content
        (string_interpolation
          (string_interpolation_content
            (value_path
              (value_name)))))))
  (expression_item
    (quoted_string
      (quoted_string_content)))
  (expression_item
    (quoted_string
      (quoted_string_content
        (string_interpolation
          (string_interpolation_content
            (value_path
              (value_name))))))))

================================================================================
comment escapes
================================================================================
(*
(** hit*)
(hi)

  *)
let a= 10;;
--------------------------------------------------------------------------------

(compilation_unit
  (comment
    (comment))
  (value_definition
    (let_binding
      (value_name)
      (number))))

================================================================================
Comment block
================================================================================

(* 
module List2 = struct
  (** Returns a list with up to n items from the input list *)
  let take n list =
      let rec loop remaining newList  = function
      |[]-> newList|>List.rev
      |_ when (remaining=0)->newList|>List.rev
      |head::tail-> loop (remaining-1) (head::newList) tail
      in
    loop n [] list 
  
end
module Printers = struct
  open Printf;;
  (**prints the first 10 items of the list.
   Unless printall is set to true in which cse it prints them all*)
  let printList ?(printAll=false) list  =
    let newList =
      if printAll then list else list|>List2.take 10 in
    let truncated=(newList|>List.length) <> (list |>List.length) in

    newList
    |>String.concat ";"
    |>sprintf (if not truncated then"[%s]" else "[%s;...]")
  ;; 
  (**Prints a list of ints int format [1,2,3]*)
  let intList ?(printAll=false)  list  = 
    list
    |>List.map string_of_int 
    |>printList ~printAll 

 let stringTupleList list =
   list|>List.iter (fun (x,y)->Printf.printf "%s %s \n" x y)
end

*)
--------------------------------------------------------------------------------

(compilation_unit
  (comment
    (comment)
    (comment)
    (conversion_specification)
    (conversion_specification)
    (comment)
    (conversion_specification)
    (conversion_specification)
    (escape_sequence)))

================================================================================
BIG
================================================================================

(* { :a | |} }*)
(*
| '[' :: tl -> start Array tl|
 *)
--------------------------------------------------------------------------------

(compilation_unit
  (comment)
  (comment))
